/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hattmakarna.UI;

import hattmakarna.data.Customer;
import hattmakarna.data.CustomerRegister;
import static hattmakarna.data.Hattmakarna.idb;
import hattmakarna.data.Model;
import hattmakarna.data.ModelRegister;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oru.inf.InfException;
import hattmakarna.data.User;

/**
 *
 * @author Edvard
 */
public class StatisticsWindow extends javax.swing.JFrame {

    private ArrayList<Model> hatModels;
    ModelRegister modelRegister;
    CustomerRegister customerRegister;
    Calendar cal = Calendar.getInstance();
    private final Date defaultFromDate = new GregorianCalendar(2024, Calendar.JANUARY, 1).getTime();
    private final Date defaultToDate = new Date();
    private List<String> selectedCustomerNames = new ArrayList<>();
    private List<String> selectedModelNames = new ArrayList<>();

    /**
     * Creates new form StatisticsWindow
     */
    public StatisticsWindow() {
        initComponents();
        init();
    }
    
    
    private void init() {
        
        this.setTitle("Statistik");
        
        datePickerTo.setDate(new Date());
        cal.set(Calendar.YEAR, 2024);
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        datePickerFrom.setDate(cal.getTime());

        setLocationRelativeTo(null);
        customerRegister = new CustomerRegister();
        fillSearchResults();
        modelRegister = new ModelRegister();
        hatModels = modelRegister.getAllHats();
        fillModels();
        loadAllDataToTable();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FilterDialog = new javax.swing.JDialog();
        btnApplyFilters = new javax.swing.JButton();
        lblCustomers = new javax.swing.JLabel();
        lblHatModels = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCustomers = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstHatModels = new javax.swing.JList<>();
        txtSearchCustomer = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnEraseFilter = new javax.swing.JButton();
        datePickerFrom = new com.toedter.calendar.JDateChooser();
        datePickerTo = new com.toedter.calendar.JDateChooser();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstSelectedCustomers = new javax.swing.JList<>();
        lblSelectedCustomers = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstSelectedHatModels = new javax.swing.JList<>();
        lblSelectedHatModels = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        paneStats = new javax.swing.JScrollPane();
        tblStats = new javax.swing.JTable();
        btnFilter = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();

        FilterDialog.setMinimumSize(new java.awt.Dimension(600, 500));

        btnApplyFilters.setText("Applicera Filter");
        btnApplyFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyFiltersActionPerformed(evt);
            }
        });

        lblCustomers.setText("Kunder");

        lblHatModels.setText("Hatmodeller");

        lblDate.setText("Datum");

        lstCustomers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstCustomers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstCustomersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstCustomers);

        lstHatModels.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstHatModels.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstHatModelsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstHatModels);

        btnSearch.setText("Sök");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnEraseFilter.setText("Rensa Filter");
        btnEraseFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEraseFilterActionPerformed(evt);
            }
        });

        lblFrom.setText("Från");

        lblTo.setText("Till");

        jScrollPane3.setViewportView(lstSelectedCustomers);

        lblSelectedCustomers.setText("Valda kunder:");

        jScrollPane4.setViewportView(lstSelectedHatModels);

        lblSelectedHatModels.setText("Valda hattmodeller:");

        javax.swing.GroupLayout FilterDialogLayout = new javax.swing.GroupLayout(FilterDialog.getContentPane());
        FilterDialog.getContentPane().setLayout(FilterDialogLayout);
        FilterDialogLayout.setHorizontalGroup(
            FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FilterDialogLayout.createSequentialGroup()
                        .addComponent(btnEraseFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnApplyFilters))
                    .addGroup(FilterDialogLayout.createSequentialGroup()
                        .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FilterDialogLayout.createSequentialGroup()
                                .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(FilterDialogLayout.createSequentialGroup()
                                            .addGap(55, 55, 55)
                                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(lblCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1))
                                    .addComponent(lblSelectedCustomers))
                                .addGap(35, 35, 35)
                                .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSelectedHatModels)
                                    .addGroup(FilterDialogLayout.createSequentialGroup()
                                        .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                            .addComponent(lblHatModels))
                                        .addGap(26, 26, 26)
                                        .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDate)
                                            .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(datePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(datePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 7, Short.MAX_VALUE)))
                .addContainerGap())
        );
        FilterDialogLayout.setVerticalGroup(
            FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FilterDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomers)
                    .addComponent(lblHatModels)
                    .addComponent(lblDate))
                .addGap(18, 18, 18)
                .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(FilterDialogLayout.createSequentialGroup()
                        .addComponent(lblFrom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(txtSearchCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(FilterDialogLayout.createSequentialGroup()
                        .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSelectedCustomers)
                            .addComponent(lblSelectedHatModels))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(FilterDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEraseFilter)
                    .addComponent(btnApplyFilters))
                .addGap(23, 23, 23))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setText("Tillbaka");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        lblTitle.setText("Försäljningsstatistik");

        tblStats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStats.getTableHeader().setReorderingAllowed(false);
        paneStats.setViewportView(tblStats);

        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        lblTotal.setText("Total:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paneStats, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitle)
                            .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(paneStats, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTotal)
                .addGap(35, 35, 35)
                .addComponent(btnBack)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        FilterDialog.setVisible(true);
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        fillSearchResults();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnApplyFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyFiltersActionPerformed
        // TODO add your handling code here:
        List<String> selectedCustomers = new ArrayList<>(selectedCustomerNames);
        List<String> selectedModels = new ArrayList<>(selectedModelNames);
        Date startDate = datePickerFrom.getDate();
        Date endDate = datePickerTo.getDate();

        //Hämta customerId från namn
        List<Integer> customerIds = new ArrayList<>();
        for (Customer customer : customerRegister.getAllCustomers()) {
            if (selectedCustomers.contains(customer.getFullName())) {
                customerIds.add(Integer.valueOf(customer.getCustomerID()));
            }
        }

        // Hämta filtrerad data
        ArrayList<HashMap<String, String>> result = filterButton(customerIds, selectedModels, startDate, endDate);

        // Visa resultatet i tabellen
        updateTable(result); // <-- denna metod skriver vi sen
    }//GEN-LAST:event_btnApplyFiltersActionPerformed

    private void btnEraseFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraseFilterActionPerformed
        lstCustomers.clearSelection();
        lstHatModels.clearSelection();
        selectedCustomerNames.clear();
        selectedModelNames.clear();

        datePickerFrom.setDate(defaultFromDate);
        datePickerTo.setDate(defaultToDate);

        DefaultTableModel model = (DefaultTableModel) tblStats.getModel();
        model.setRowCount(0);

        fillSearchResults();
        fillModels();

        lblTotal.setText("");
        loadAllDataToTable();
    }//GEN-LAST:event_btnEraseFilterActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        new MainMenu(new User("1")).setVisible(true);
        this.setVisible(false);
        FilterDialog.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void lstCustomersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstCustomersValueChanged
        if (!evt.getValueIsAdjusting()) {
            List<String> selected = lstCustomers.getSelectedValuesList();
            for (String name : selected) {
                if (!selectedCustomerNames.contains(name)) {
                    selectedCustomerNames.add(name);
                }
            }
            DefaultListModel<String> listModel = new DefaultListModel<>();
            for (String customer : selectedCustomerNames) {
                listModel.addElement(customer);
            }
            lstSelectedCustomers.setModel(listModel);
        }
    }//GEN-LAST:event_lstCustomersValueChanged

    private void lstHatModelsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstHatModelsValueChanged
        if (!evt.getValueIsAdjusting()) {
            // Få alla valda hattmodeller från den första listan
            List<String> selectedModels = lstHatModels.getSelectedValuesList();
            for (String model : selectedModels) {
                if (!selectedModelNames.contains(model)) {
                    selectedModelNames.add(model);
                }
            }
            DefaultListModel<String> modelListModel = new DefaultListModel<>();
            for (String model : selectedModelNames) {
                modelListModel.addElement(model);
            }
            lstSelectedHatModels.setModel(modelListModel);
        }
    }//GEN-LAST:event_lstHatModelsValueChanged

    public void selectCustomer() {
        String selectedCustomer = lstCustomers.getSelectedValue();
        for (Customer customer : customerRegister.getAllCustomers()) {
            if (customer.getFullName().equalsIgnoreCase(selectedCustomer)) {
                break;
            }
        }
    }

    private void fillSearchResults() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        lstCustomers.setModel(listModel);

        ArrayList<Customer> customerMailList = customerRegister.searchByEmail(txtSearchCustomer.getText());
        ArrayList<Customer> customerNameList = customerRegister.searchByName(txtSearchCustomer.getText());

        HashMap<String, Customer> customerMap = new HashMap<>();

        for (Customer c : customerMailList) {
            customerMap.put(c.getCustomerID(), c);
        }
        for (Customer c : customerNameList) {
            customerMap.put(c.getCustomerID(), c);
        }

        for (Customer c : customerMap.values()) {
            listModel.addElement(c.getFullName());
        }
    }

    private void fillModels() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        lstHatModels.setModel(listModel);

        for (Model model : hatModels) {
            listModel.addElement(model.getName());
        }
    }

    public ArrayList<HashMap<String, String>> filterButton(List<Integer> customerIds, List<String> hatModels, Date dateFrom, Date dateTo) {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String fromDate = sdf.format(dateFrom);
            String toDate = sdf.format(dateTo);

            // Bygg WHERE-delar
            String customerCondition = "";
            if (!customerIds.isEmpty()) {
                customerCondition += " AND c.customer_id IN (" + customerIds.stream().map(String::valueOf).collect(Collectors.joining(",")) + ")";
            }

            String modelCondition = "";
            if (!hatModels.isEmpty()) {
                String formattedModels = hatModels.stream()
                        .map(m -> "'" + m.replace("'", "''") + "'")
                        .collect(Collectors.joining(", "));
                modelCondition += " AND hm.name IN (" + formattedModels + ")";
            }

            String sql
                    = "SELECT CONCAT(c.first_name, ' ', c.last_name) AS customer_name, "
                    + "       COUNT(h.hat_id) AS total_antal, "
                    + "       SUM(s.price) AS total_summa "
                    + "FROM customer c "
                    + "JOIN sales_order s ON c.customer_id = s.customer_id "
                    + "LEFT JOIN hat h ON h.order_id = s.order_id "
                    + "LEFT JOIN hat_model m ON h.model_id = m.model_id "
                    + "WHERE s.recived_date BETWEEN '" + fromDate + "' AND '" + toDate + "'";

            if (!customerIds.isEmpty()) {
                sql += " AND c.customer_id IN (" + customerIds.stream().map(String::valueOf).collect(Collectors.joining(",")) + ")";
            }

            if (!hatModels.isEmpty()) {
                sql += " AND m.name IN (" + hatModels.stream().map(m -> "'" + m.replace("'", "''") + "'").collect(Collectors.joining(",")) + ")";
            }

            sql += " GROUP BY c.customer_id";

            return idb.fetchRows(sql);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Fel vid filtrering: " + e.getMessage());
            return null;
        }
    }

    private void updateTable(ArrayList<HashMap<String, String>> data) {
        DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Kund", "Antal hattar", "Summa"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        int totalCount = 0;
        double totalSum = 0.0;

        for (HashMap<String, String> row : data) {
            String customerName = row.get("customer_name");
            int count = Integer.parseInt(row.get("total_antal"));
            double sum = Double.parseDouble(row.get("total_summa"));

            totalCount += count;
            totalSum += sum;

            tblStats.getTableHeader().setReorderingAllowed(false);

            tableModel.addRow(new Object[]{customerName, count, sum});
        }

        tblStats.setModel(tableModel);

        lblTotal.setText("Totalt antal hattar: " + totalCount + " | Total försäljning: " + totalSum + " kr");
    }

    private void loadAllDataToTable() {
        try {
            String sql
                    = "SELECT CONCAT(c.first_name, ' ', c.last_name) AS customer_name, "
                    + "       COUNT(h.hat_id) AS total_antal, "
                    + "       IFNULL(SUM(o.price), 0) AS total_summa "
                    + "FROM customer c "
                    + "JOIN sales_order o ON c.customer_id = o.customer_id "
                    + "JOIN hat h ON o.order_id = h.order_id "
                    + "GROUP BY c.customer_id";

            ArrayList<HashMap<String, String>> result = idb.fetchRows(sql);

            updateTable(result);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kunde inte ladda startdata: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatisticsWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog FilterDialog;
    private javax.swing.JButton btnApplyFilters;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEraseFilter;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnSearch;
    private com.toedter.calendar.JDateChooser datePickerFrom;
    private com.toedter.calendar.JDateChooser datePickerTo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblCustomers;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblHatModels;
    private javax.swing.JLabel lblSelectedCustomers;
    private javax.swing.JLabel lblSelectedHatModels;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JList<String> lstCustomers;
    private javax.swing.JList<String> lstHatModels;
    private javax.swing.JList<String> lstSelectedCustomers;
    private javax.swing.JList<String> lstSelectedHatModels;
    private javax.swing.JScrollPane paneStats;
    private javax.swing.JTable tblStats;
    private javax.swing.JTextField txtSearchCustomer;
    // End of variables declaration//GEN-END:variables
}
